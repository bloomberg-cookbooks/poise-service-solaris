<?xml version="1.0" ?>
<!DOCTYPE service_bundle
  SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<!--
    Manifest generated by Chef
-->
<service_bundle type="manifest" name="<%= @name %>">
    <service version="1" type="service" name="<%= @name %>">
        <!--
            The following dependency keeps us from starting until the
            multi-user milestone is reached.
        -->
        <dependency restart_on="none" type="service"
            name="multi_user_dependency" grouping="require_all">
            <service_fmri value="svc:/milestone/multi-user"/>
        </dependency>
        <exec_method timeout_seconds="60" type="method" name="start"
            exec="<%= @command.encode(:xml => :text) %>">
            <method_context working_directory="<%= @directory %>">
              <method_credential user="<%= @user %>" />
              <% unless @environment.empty? %>
                <method_environment>
                  <% @environment.each do |name,value| %>
                    <%= "<envvar name=\"#{name}\" value=\"#{value}\" />" %>
                  <% end %>
                </method_environment>
              <% end %>
            </method_context>
        </exec_method>
        <!--
            The exec attribute below can be changed to a command that SMF
            should execute to stop the service.  See smf_method(5) for more
            details.
        -->
        <exec_method timeout_seconds="60" type="method" name="stop"
            exec=":kill">
            <method_context working_directory="<%= @directory %>">
              <method_credential user="<%= @user %>" />
              <% unless @environment.empty? %>
                <method_environment>
                  <% @environment.each do |name,value| %>
                    <%= "<envvar name=\"#{name}\" value=\"#{value}\" />" %>
                  <% end %>
                </method_environment>
              <% end %>
            </method_context>
        </exec_method>
        <!--
            The exec attribute below can be changed to a command that SMF
            should execute when the service is refreshed.  Services are
            typically refreshed when their properties are changed in the
            SMF repository.  See smf_method(5) for more details.  It is
            common to retain the value of :true which means that SMF will
            take no action when the service is refreshed.  Alternatively,
            you may wish to provide a method to reread the SMF repository
            and act on any configuration changes.
        -->
        <exec_method timeout_seconds="60" type="method" name="refresh"
            exec=":true">
            <method_context working_directory="<%= @directory %>">
              <method_credential user="<%= @user %>" />
              <% unless @environment.empty? %>
                <method_environment>
                  <% @environment.each do |name,value| %>
                    <%= "<envvar name=\"#{name}\" value=\"#{value}\" />" %>
                  <% end %>
                </method_environment>
              <% end %>
            </method_context>
        </exec_method>
        <!--
            We do not need a duration property group, because contract is
            the default.  Search for duration in svc.startd(1M).
        -->
        <instance enabled="true" name="default"/>
        <template>
            <common_name>
                <loctext xml:lang="C">
                  <%= @name %>
                </loctext>
            </common_name>
            <description>
                <loctext xml:lang="C">
                    Solaris service for <%= @name %>
                </loctext>
            </description>
        </template>
    </service>
</service_bundle>
